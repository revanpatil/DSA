DSA :

	String skip question -> skip a letter, skip a word 
	

static skip(String up){
	if(up.isEmpty){
		return "";
	}
	
	if(up.charAt(0) == "a"){
		return skip(up.subString(1));
	}else{
		return up.charAt(0) + skip( up.subString(1));
	}
}

	Subsets Subseq pattern : Taking any number of element tat may and may not be adjacents 
	Permutation and combination 
	This pattern of taking some element and removing some element than subset pattern
public class sub{
psvm(){
	subsequence("","abc");
	}
static void subsequence(String p,String up){
	if(seq.isEmpty()){
		sout(p);
		return;
	}
	Char ch = up.subString(0);
	skip(p + ch ,up.subString(1));
	skip(p, up.subString(1);
}
}

	permutation count of a string 
static int permutationsCount(String p, String up) {
        if (up.isEmpty()) {
            return 1;
        }
        int count = 0;
        char ch = up.charAt(0);
        for (int i = 0; i <= p.length(); i++) {
            String f = p.substring(0, i);
            String s = p.substring(i, p.length());
            count = count + permutationsCount(f + ch + s, up.substring(1));
        }
        return count;
   }

	
	Permutation of string 
static void permutations(String p, String up) {
        if (up.isEmpty()) {
            System.out.println(p);
            return;
        }
        char ch = up.charAt(0);
        for (int i = 0; i <= p.length(); i++) {
            String f = p.substring(0, i);
            String s = p.substring(i, p.length());
            permutations(f + ch + s, up.substring(1));
        }
}
	
	
	Subset of Array of Integers 

static List<List<Integer>> subsets(int arr[]){

List<List<Intger>> outer = new ArrayList<>();
outer.add(new ArrayList<>());
for(int num : arr){
	int n = outer.size();
	for(int i =0;i<n;i++){
	List<Intger> internal = new ArrayList<>();
	internal.add(num);
	outer.add(internal);
	}}
	return outer;
}

	Dice combination for returning 4 
public class Dice {
    public static void main(String[] args) {
        dice("", 4);
        System.out.println(diceRet("", 4));
    }

    static void dice(String p, int target) {
        if (target == 0) {
            System.out.println(p);
            return;
        }

        for (int i = 1; i <= 6 && i <= target; i++) {
            dice(p + i, target - i);
        }
}

	Backtracking 
	Nqueens Place 4 queens on it 
	pubic class Nqueens{
		psvm(String args[]){
			int n = 4
			boolean board[][] = new boolean[n][n];
			sout(queens(board,n));
		}
		
		static int queens(boolean board[][],int row){
			if(n= board.length){
				display(board);
				sout;
				return 1;
			}
			int count = 0;
			for(int col =0;col<board.length;col++){
				if(isSafe(board,row,col){
				board[row][col] = true;
				count += queens(board,row+1);
				board[row][col] = false;
				}
			}
			return count;
		}
		
		 private static boolean isSafe(boolean[][] board, int row, int col) {
        // check vertical row
        for (int i = 0; i < row; i++) {
            if (board[i][col]) {
                return false;
            }
        }

        // diagonal left
        int maxLeft = Math.min(row, col);
        for (int i = 1; i <= maxLeft; i++) {
            if(board[row-i][col-i]) {
                return false;
            }
        }

        // diagonal right
        int maxRight = Math.min(row, board.length - col - 1);
        for (int i = 1; i <= maxRight; i++) {
            if(board[row-i][col+i]) {
                return false;
            }
        }

        return true;
    }

    private static void display(boolean[][] board) {
        for(boolean[] row : board) {
            for(boolean element : row) {
                if (element) {
                    System.out.print("Q ");
                } else {
                    System.out.print("X ");
                }
            }
            System.out.println();
        }
    }
	
	
	
	
	
	
	
	Kadanes algo Maximum sum of sub array
	
int maxSubarraySum(int[] arr) {
    int maxCurrent = arr[0];
    int maxGlobal = arr[0];
    
    for (int i = 1; i < arr.length; i++) {
        maxCurrent = Math.max(arr[i], maxCurrent + arr[i]);
        if (maxCurrent > maxGlobal) {
            maxGlobal = maxCurrent;
        }
    }
    
    return maxGlobal;
}

	Phone number :
class Solution {
    public List<String> letterCombinations(String digits) {
         if (digits == null || digits.isEmpty()) {
            return new ArrayList<>();
        }
        return padRet("",digits);
    }

    static List<String> padRet(String p, String up) {
        if (up.isEmpty()) {
            List<String> list = new ArrayList<>();
            list.add(p);
            return list;
        }

        // Define the mapping of digits to letters
        String[] mapping = {
            "",     // 0
            "",     // 1
            "abc",  // 2
            "def",  // 3
            "ghi",  // 4
            "jkl",  // 5
            "mno",  // 6
            "pqrs", // 7
            "tuv",  // 8
            "wxyz"  // 9
        };

        int digit = up.charAt(0) - '0'; // Convert char to int
        String letters = mapping[digit]; // Get corresponding letters
        List<String> list = new ArrayList<>();

        // Loop through the corresponding letters
        for (char ch : letters.toCharArray()) {
            list.addAll(padRet(p + ch, up.substring(1)));
        }

        return list;
    }
}

		Linked List : 
package com.kunal;

import javax.swing.*;

public class InterviewQuestions {

    // https://leetcode.com/problems/linked-list-cycle
    // Amazon and Microsoft
    public boolean hasCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                return true;
            }
        }
        return false;
    }

    // find length of the cycle
    public int lengthCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                // calculate the length
                ListNode temp = slow;
                int length = 0;
                do {
                    temp = temp.next;
                    length++;
                } while (temp != slow);
                return length;
            }
        }
        return 0;
    }

    // https://leetcode.com/problems/linked-list-cycle-ii/
    public ListNode detectCycle(ListNode head) {
        int length = 0;

        ListNode fast = head;
        ListNode slow = head;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                length = lengthCycle(slow);
                break;
            }
        }

        if (length == 0) {
            return null;
        }

        // find the start node
        ListNode f = head;
        ListNode s = head;

        while (length > 0) {
            s = s.next;
            length--;
        }

        // keep moving both forward and they will meet at cycle start
        while (f != s) {
            f = f.next;
            s = s.next;
        }
        return s;
    }

    // Google: https://leetcode.com/problems/happy-number/
    public boolean isHappy(int n) {
        int slow = n;
        int fast = n;

        do {
            slow = findSquare(slow);
            fast = findSquare(findSquare(fast));
        } while (slow != fast);

        if (slow == 1) {
            return true;
        }
        return false;
    }
    private int findSquare(int number) {
        int ans = 0;
        while (number > 0) {
            int rem = number % 10 ;
            ans += rem * rem;
            number /= 10;
        }
        return ans;
    }


    // https://leetcode.com/problems/middle-of-the-linked-list/submissions/
    public ListNode middleNode(ListNode head) {
        ListNode s = head;
        ListNode f = head;

        while (f != null && f.next != null) {
            s = s.next;
            f = f.next.next;
        }
        return s;
    }



    // https://leetcode.com/problems/reverse-linked-list/submissions/
    // google, apple, amazon, microsoft
    public ListNode reverseList(ListNode head) {
        if (head == null) {
            return head;
        }
        ListNode prev = null;
        ListNode present = head;
        ListNode next = present.next;

        while (present != null) {
            present.next = prev;
            prev = present;
            present = next;
            if (next != null) {
                next = next.next;
            }
        }
        return prev;
    }

    // Google, Microsoft, Facebook: https://leetcode.com/problems/reverse-linked-list-ii/
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if (left == right) {
            return head;
        }

        // skip the first left-1 nodes
        ListNode current = head;
        ListNode prev = null;
        for (int i = 0; current != null && i < left - 1; i++) {
            prev = current;
            current = current.next;
        }

        ListNode last = prev;
        ListNode newEnd = current;

        // reverse between left and right
        ListNode next = current.next;
        for (int i = 0; current != null && i < right - left + 1; i++) {
            current.next = prev;
            prev = current;
            current = next;
            if (next != null) {
                next = next.next;
            }
        }

        if (last != null) {
            last.next = prev;
        } else {
            head = prev;
        }

        newEnd.next = current;
        return head;
    }


    // google, amazon, facebook, microsoft: https://leetcode.com/problems/reverse-nodes-in-k-group/
    public ListNode reverseKGroup(ListNode head, int k) {
        if (k <= 1 || head == null) {
            return head;
        }

        ListNode current = head;
        ListNode prev = null;

		int length = getLength(head);
		int count = length / k;
        while (count > 0) {
            ListNode last = prev;
            ListNode newEnd = current;

            ListNode next = current.next;
            for (int i = 0; current != null && i < k; i++) {
                current.next = prev;
                prev = current;
                current = next;
                if (next != null) {
                    next = next.next;
                }
            }

            if (last != null) {
                last.next = prev;
            } else {
                head = prev;
            }

            newEnd.next = current;

            prev = newEnd;
			count--;
        }
        return head;
    }

	public int getLength(ListNode head) {
		ListNode node = head;
		int length = 0;
		while (node != null) {
			length++;
			node = node.next;
		}
		return length;
	}

    // https://www.geeksforgeeks.org/reverse-alternate-k-nodes-in-a-singly-linked-list/
    public ListNode reverseAlternateKGroup(ListNode head, int k) {
        if (k <= 1 || head == null) {
            return head;
        }

        // skip the first left-1 nodes
        ListNode current = head;
        ListNode prev = null;

        while (current != null) {
            ListNode last = prev;
            ListNode newEnd = current;

            // reverse between left and right
            ListNode next = current.next;
            for (int i = 0; current != null && i < k; i++) {
                current.next = prev;
                prev = current;
                current = next;
                if (next != null) {
                    next = next.next;
                }
            }

            if (last != null) {
                last.next = prev;
            } else {
                head = prev;
            }

            newEnd.next = current;

            // skip the k nodes
            for (int i = 0; current != null && i < k; i++) {
                prev = current;
                current = current.next;
            }
        }
        return head;
    }


    // linkedin, google, facebook, microsoft, amazon, apple
//    https://leetcode.com/problems/palindrome-linked-list/
    public boolean isPalindrome(ListNode head) {
        ListNode mid = middleNode(head);
        ListNode headSecond = reverseList(mid);
        ListNode rereverseHead = headSecond;

        // compare both the halves
        while (head != null && headSecond != null) {
            if (head.val != headSecond.val) {
                break;
            }
            head = head.next;
            headSecond = headSecond.next;
        }
        reverseList(rereverseHead);

        return head == null || headSecond == null;
    }

    // https://leetcode.com/problems/reorder-list/
// Google, Facebook
    public void reorderList(ListNode head) {
        if (head == null || head.next == null) {
            return;
        }

        ListNode mid = middleNode(head);

        ListNode hs = reverseList(mid);
        ListNode hf = head;

        // rearrange
        while (hf != null && hs != null) {
            ListNode temp = hf.next;
            hf.next = hs;
            hf = temp;

            temp = hs.next;
            hs.next = hf;
            hs = temp;
        }

        // next of tail to null
        if (hf != null) {
            hf.next = null;
        }
    }

    // FaceBook, Twitter, Google: https://leetcode.com/problems/rotate-list/
    public ListNode rotateRight(ListNode head, int k) {
        if (k <= 0 || head == null || head.next == null) {
            return head;
        }

        ListNode last = head;
        int length = 1;
        while (last.next != null) {
            last = last.next;
            length++;
        }

        last.next = head;
        int rotations = k % length;
        int skip = length - rotations;
        ListNode newLast = head;
        for (int i = 0; i < skip - 1; i++) {
            newLast = newLast.next;
        }
        head = newLast.next;
        newLast.next = null;

        return head;
    }

}

class ListNode {
    int val;
    ListNode next;

    public ListNode() {
    }

    ListNode(int x) {
        val = x;
        next = null;
    }
}


---------------------------------------------------------------------
	Merge Sort LinkedList 
package com.kunal;

public class MergeSort {

    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode mid = getMid(head);
        ListNode left = sortList(head);
        ListNode right = sortList(mid);

        return merge(left, right);
    }

    ListNode merge(ListNode list1, ListNode list2) {
        ListNode dummyHead = new ListNode();
        ListNode tail = dummyHead;
        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                tail.next = list1;
                list1 = list1.next;
                tail = tail.next;
            } else {
                tail.next = list2;
                list2 = list2.next;
                tail = tail.next;
            }
        }
        tail.next = (list1 != null) ? list1 : list2;
        return dummyHead.next;
    }

    ListNode getMid(ListNode head) {
        ListNode midPrev = null;
        while (head != null && head.next != null) {
            midPrev = (midPrev == null) ? head : midPrev.next;
            head = head.next.next;
        }
        ListNode mid = midPrev.next;
        midPrev.next = null;
        return mid;
    }
}

----------
	DFS and BFS 

// BFS to find the shortest path from the root to a leaf
    public static int findShortestPath(TreeNode root) {
        if (root == null) return 0;

        // Queue for BFS
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> depth = new LinkedList<>();

        queue.add(root);
        depth.add(1); // Depth starts at 1 for the root

        while (!queue.isEmpty()) {
            TreeNode current = queue.poll();
            int currentDepth = depth.poll();

            // If it's a leaf node, return the depth
            if (current.left == null && current.right == null) {
                return currentDepth;
            }

            // Add left child to queue
            if (current.left != null) {
                queue.add(current.left);
                depth.add(currentDepth + 1);
            }

            // Add right child to queue
            if (current.right != null) {
                queue.add(current.right);
                depth.add(currentDepth + 1);
            }
        }
        return 0; // This won't be reached if the tree is valid
    }
	

	Maximum sum for weighted nodes DFS 

    static class Result {
        int maxSum;
        public Result() {
            maxSum = Integer.MIN_VALUE; // To handle negative values
        }
    }

    public static int findMaxPathSum(TreeNode root) {
        Result result = new Result();
        calculatePathSum(root, result);
        return result.maxSum;
    }

    // Helper function to calculate the maximum path sum using DFS
    private static int calculatePathSum(TreeNode node, Result result) {
        if (node == null) return 0; // Base case: Null nodes contribute 0 to the path

        // Recursively find the max path sum for the left and right subtrees
        int leftSum = Math.max(0, calculatePathSum(node.left, result));  // Ignore negative sums
        int rightSum = Math.max(0, calculatePathSum(node.right, result));

        // Path sum passing through the current node
        int currentPathSum = leftSum + node.value + rightSum;

        // Update the global max path sum if the current path sum is larger
        result.maxSum = Math.max(result.maxSum, currentPathSum);

        // Return the maximum sum including the current node and one of its children
        return node.value + Math.max(leftSum, rightSum);
    }
	
	
	Longest sub string in a window 
public class LongestUniqueSubstring {

    public static int findLongestUniqueSubstring(String s) {
        // HashSet to store the unique characters in the current window
        HashSet<Character> set = new HashSet<>();
        
        int left = 0; // Left pointer of the window
        int maxLength = 0; // To store the maximum length of unique substring

        // Expand the window by moving the right pointer
        for (int right = 0; right < s.length(); right++) {
            char currentChar = s.charAt(right);

            // If the character is already in the set, remove characters from the left
            while (set.contains(currentChar)) {
                set.remove(s.charAt(left));
                left++;
            }

            // Add the current character to the set
            set.add(currentChar);

            // Update the maximum length
            maxLength = Math.max(maxLength, right - left + 1);
        }

        return maxLength;
    }

***************************************************************************************************************************
Comparators : 

package main.java;

import org.codewithease.javatopics.commons.Employee;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class ComparatorDemo {

    public static void main(String[] args) {

        /*
       Sort List of Objects

       Custom Sorting Criteria

       Multiple Sorting Criteria

       Case-Insensitive Sorting

       Reverse Order Sorting
         */

        //1. Sort the strings based on their length in ascending order
        List<String> fruits = Arrays.asList("apple", "cherry", "banana", "pineapple", "kiwi", "elderberry");

//        fruits.sort(Comparator.comparingInt(String::length));
        Collections.sort(fruits, Comparator.comparingInt(String::length));

        System.out.println("fruits "+fruits);


        // 2.Sort the list of integers in descending order and print the result

        List<Integer> nums = Arrays.asList(3,2,90,34,21,12);
        nums.sort(Comparator.reverseOrder());

        System.out.println("nums in reverse order : "+nums);


        // 3.Sort the list of employees based on their age in ascending order and print the result

        List<Employee> employees = Arrays.asList(new Employee(1, "Varsha", 28, 3000),
                new Employee(2, "Harsha", 21, 4000),
                new Employee(3, "Tony", 21, 1000),
                new Employee(4, "Ramesh", 30, 5000));

        employees.sort(Comparator.comparingInt(Employee::getAge));
        System.out.println("employees based on age "+employees);



        // 4.Sort the list of employees based on their age in ascending order. If the ages are the same, compare by salary. Print the result.

        employees.sort(Comparator.comparingInt(Employee::getAge).thenComparing(Employee::getSalary));
        System.out.println(
                "employees with multiple sort criteria "+employees
        );



        // 5.Sort the list of strings based on the index of the first occurrence of "e" in each string and print the result

        fruits.sort(Comparator.comparingInt(e -> e.indexOf("e")));

        System.out.println("fruits with index position sorting :: "+ fruits);



        //6. Sort a list of strings ignoring case sensitivity using a case-insensitive comparator.

        List<String> fruitsMix = Arrays.asList("APPLE", "cherry", "baNaNa", "pineapple", "KiWI", "elderberry");
        Comparator<String> caseInsensitiveComp = String.CASE_INSENSITIVE_ORDER;
        fruitsMix.sort(caseInsensitiveComp);

        System.out.println(fruitsMix);


        //7. Sort a list of dates in ascending order using the comparing() method with a lambda expression.
        List<LocalDate> dates = Arrays.asList(
                LocalDate.of(2023, 5, 10),
                LocalDate.of(2023, 3, 15),
                LocalDate.of(2023, 7, 1)
        );

        dates.sort(Comparator.comparing(date -> date));

        System.out.println(dates);

 	//fruits.sort(Comparator.comparingInt(String::length));

       List<String> sortedFruits = fruits.stream()
                .sorted(Comparator.comparingInt(String::length))
                .collect(Collectors.toList());


        Collections.sort(fruits,Comparator.comparingInt(String::length));


        List<Integer> sorted = nums.stream()
                .sorted(Comparator.reverseOrder())
                .collect(Collectors.toList());




    }
}

*************************************************************************************************************************

import java.util.*;
import java.util.stream.Collectors;

public class StreamsAllCodeSolutions {
    public static void main(String[] args) {
        List<Integer> nums = Arrays.asList(1,2,3,4,5,6,8,101);
        int[] arr = {1,2,3,4};
       // Write a program to find the sum of all elements in a List using streams.
        int sums = nums.stream().mapToInt(Integer::intValue).sum();
        System.out.println(sums);


        //Given a List of integers, write a program to find the maximum element using streams.
        int max = nums.stream().max(Comparator.naturalOrder()).get();

        System.out.println("max element :"+max);

        List<String> fruits = Arrays.asList("apple", "banana", "cherry", "coconut", "apple");

        //Given a List of strings, write a program to count the number of strings that start with a specific character using streams.
        long fruitCount = fruits.stream().filter( s -> s.startsWith("c")).count();
        System.out.println("fruitCount: "+fruitCount);


        //Write a program to convert a List of strings to uppercase using streams.
        fruits.stream().map(String::toUpperCase).forEach(System.out::println);

        //Given a List of integers, write a program to filter out the even numbers using streams.
        // Count the number of elements in a list that satisfy a specific condition using streams.

        nums.stream().filter(n -> n % 2 == 0).forEach(System.out::println);
        int even = (int) nums.stream().filter(n -> n % 2 == 0).count();
        System.out.println("no of even "+even);


        //Write a program to find the average of a List of floating-point numbers using streams.
        List<Double> numsFloat = Arrays.asList(1.3, 2.4, 3.1, 4.2, 5.4);
        double avg = numsFloat.stream().mapToDouble(Double::doubleValue).average().getAsDouble();
        System.out.println("avg ::"+avg);

        //Given a List of strings, write a program to concatenate all the strings using streams.
        String concat = fruits.stream().collect(Collectors.joining());
        System.out.println(concat);

        //Write a program to remove duplicate elements from a List using streams.
        fruits.stream().distinct().forEach(System.out::println);

        //Given a List of objects, write a program to sort the objects based on a specific attribute using streams.
        List<Person> people = Arrays.asList(
                new Person("Alice", 21),
                new Person("Anna", 29),
                new Person("Bob", 30),
                new Person("Barbie", 56),
                new Person("Charlie", 20)
        );

        people.stream().sorted(Comparator.comparing(Person::getAge)).collect(Collectors.toList()).forEach(System.out::println);

        //Write a program to check if all elements in a List satisfy a given condition using streams.
        List<Integer> numbers = Arrays.asList(2, 4, 6, 8, 10);
        boolean allEven = numbers.stream().allMatch(n -> n % 2 == 0);
        System.out.println("All numbers are even: " + allEven);


        //Sort a list of strings in ascending order using streams.
        fruits.stream().sorted().collect(Collectors.toList()).forEach(System.out::println);

        //Check if a list contains a specific element using streams.
        boolean exists = nums.stream().anyMatch(n -> n.equals(9));
        System.out.println(exists);

        //Create a new list containing the square of each element from the original list using streams
        nums.stream().map(n -> n*n).collect(Collectors.toList()).forEach(System.out::println);

        //Find the average length of strings in a list using streams.
        fruits.stream().mapToInt(String::length).average();

        //Find the longest string in a list using streams.
        fruits.stream().mapToInt(String::length).max();

//        Group a list of objects based on a specific attribute using streams.
//        List<Employee> sortedEmployees = people.stream()
//                .sorted(Comparator.comparing(Employee::getDepartment)
//                        .thenComparing(Employee::getSalary))
//                .collect(Collectors.toList());


        //Remove null values from a list using streams.
        List<String> nonNullValues = fruits.stream()
                .filter(Objects::nonNull)
                .collect(Collectors.toList());


        //Find the second smallest element in a list of integers using streams.
        Optional<Integer> secondSmallest = numbers.stream()
                .distinct()
                .sorted()
                .skip(1)
                .findFirst();



        //Find the intersection of two lists using streams
        List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> list2 = Arrays.asList(4, 5, 6, 7, 8);

        List<Integer> intersection = list1.stream()
                .filter(list2::contains)
                .collect(Collectors.toList());


    }
}

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class StreamsCodeDemoPart2 {
    public static void main(String[] args) {

        //1. Given a sentence, find and print the frequency of each word.
         String sentence = "Java is a programming language. Java is versatile.";

         Map<String, Long> wordFreqMap = Arrays.stream(sentence.split("\\s+"))
                 .collect(Collectors.groupingBy(String::toLowerCase, Collectors.counting()));


//        System.out.println(wordFreqMap);

        //2. Given a list of integers, find out all the numbers starting with 1.

        List<Integer> nums = Arrays.asList(12, 13, 18, 21, 90, 11);

        List<Integer> numsWithOne = nums.stream().filter( n -> String.valueOf(n).startsWith("1")).collect(Collectors.toList());

//        System.out.println(numsWithOne);

       //3. Given a list of names, group them by their first letter, and then count the number of names in each group.

        String[] names = {"Alice", "Bob", "Charlie", "Amy", "Bill", "Anna"};

        Map<Character,Long> namesMap = Arrays.stream(names).collect(Collectors.groupingBy(s -> s.charAt(0), Collectors.counting()));

//        System.out.println(namesMap);


        // 4. Find and print duplicate numbers in an array if it contains multiple duplicates?

        int[] arr = {2,4,2,3,1,5, 5,78,3,1,5};

//        Arrays.stream(arr).boxed()
//                .collect(Collectors.groupingBy(e-> e, Collectors.counting()))
//                .entrySet().stream()
//                //key -value - 2 (k), 2(val)
//                .filter(entry -> entry.getValue() > 1)
//                .map(Map.Entry::getKey)
//                .forEach(System.out::println);


        // 5. How are duplicates removed from a given array in Java?
//
        int[] arr2 = {2,4,2,3,1,78};

        int[] newarr = Arrays.stream(arr).distinct().toArray();

//        System.out.println(Arrays.toString(newarr));


        //6. Given a list of words, filter and print the palindromes

        List<String> strings = List.of("level", "hello", "radar", "world", "deed");

        List<String> palindromeWords = strings.stream().
                filter(str -> str.equals(new StringBuilder(str).reverse().toString())).collect(Collectors.toList());

//        System.out.println(palindromeWords);


        // 7. How do you merge two sorted arrays into a single sorted array?
        int[] array1 = {1, 3,32, 5, 7};
        int[] array2 = {2, 4, 6,62, 8};

        int[] sortedArray = IntStream.concat(Arrays.stream(array1), Arrays.stream(array2)).sorted().toArray();
//       System.out.println(Arrays.toString(sortedArray));


        //8. Given two lists of strings, concatenate them and remove duplicates.

        List<String> list1 = List.of("apple", "banana", "orange");
        List<String> list2 = List.of("banana", "kiwi", "grape");

        List<String> uniqueList = Stream.concat(list1.stream(), list2.stream()).distinct().collect(Collectors.toList());
//        System.out.println(uniqueList);


        // 9. Student Grade Classification - 70 and above pass

        List<Student> students = List.of(
                new Student("Alice", 85),
                new Student("Bob", 60),
                new Student("Charlie", 75),
                new Student("David", 90)
        );


        Map<String, List<Student>> studentMap =
                students.stream().collect(Collectors.groupingBy(student -> student.grade >= 70 ? "Pass" : "Fail"));

//        System.out.println(studentMap);


        //10. Given a list of strings, sort them according to increasing order of their length.

        List<String> fruits = Arrays.asList("Mango","pear" ,"Apple", "Banana", "Pineapple", "Kiwi");

        fruits.stream().sorted(Comparator.comparingInt(String::length)).forEach(System.out::println);


        //12.Partition a list of numbers into two groups: even and odd, using a custom predicate.
        List<Integer> numbers1 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        Map<Boolean, List<Integer>> partitionedNumbers = numbers1.stream()
                .collect(Collectors.partitioningBy(n -> n % 2 == 0));

        System.out.println(partitionedNumbers);

        //13. Find the squares of the first three even numbers in a list.

        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        List<Integer> firstThreeSquares = numbers.stream()
                .filter(n -> n % 2 == 0)
                .map(n -> n * n)
                .limit(3)
                .collect(Collectors.toList());

        // 14. Flatten a list of lists

        List<List<Integer>> listOfLists = Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4), Arrays.asList(5, 6));
        List<Integer> flattenedList = listOfLists.stream()
                .flatMap(List::stream)
                .collect(Collectors.toList());

        System.out.println(flattenedList);



    }
}

import java.util.Comparator;
import java.util.stream.*;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class StreamsPart2 {

    public static void main(String[] args) {

        List<Integer> numbers = Arrays.asList(123, 45, 167, 189, 12, 1234, 198, 102);

        List<String> fruits = Arrays.asList("Mango", "Apple", "Banana", "Kiwi");

        //1. Given a list of integers, find the total number of elements present in the list.
        String str = "madam";

        //1. Given a list of integers, find the total number of elements present in the list. 

        long totalCount = numbers.stream().count();
        System.out.println("Total number of elements: " + totalCount);

        //2. Given a list of integers, find out all the numbers starting with 1.

        List<Integer> numbersStartingWithOne = numbers.stream().filter(number -> String.valueOf(number).startsWith("1")).collect(Collectors.toList());
        System.out.println("Numbers starting with 1: " + numbersStartingWithOne);

        //3. Find the frequency of each element in an array.

        Integer[] array = {1, 2, 3, 2, 4, 1, 5, 2, 3, 1, 4, 4, 5};
        Map<Integer, Long> frequencyMap = Arrays.stream(array).collect(Collectors.groupingBy(e -> e, Collectors.counting()));
        System.out.println("Frequency of each element: " + frequencyMap);

        //4. Count the total number of vowels in a collection of strings.

        long totalVowels = fruits.stream()
                .flatMapToInt(CharSequence::chars)  // Flatten strings to a stream of characters
                .filter(c -> "aeiouAEIOU".indexOf(c) != -1)  // Filter out vowels
                .count();
        System.out.println("Total number of vowels: " + totalVowels);

        //5. Count the occurrences of each character in a given string and return a map with character frequencies.

        Map<Character, Long> charFrequencyMap = str.chars().mapToObj(c -> (char) c)
                .collect(Collectors.groupingBy(c -> c, Collectors.counting()));
        System.out.println("Character frequencies: " + charFrequencyMap);

        //6. Given a list of integers, sort all the values present in it in descending order.

        List<Integer> sortedDescending = numbers.stream()
                .sorted(Comparator.reverseOrder()) // Comparator.reverseOrder()
                .collect(Collectors.toList());
        System.out.println("Sorted in descending order: " + sortedDescending);

        //7. Given a list of strings, sort them according to increasing order of their length.

        List<String> sortedByLength = fruits.stream().sorted(Comparator.comparingInt(String::length)).collect(Collectors.toList());
        System.out.println("Sorted by length in increasing order: " + sortedByLength);

        //8. Given two lists of strings, merge them and remove duplicates.

        List<String> list1 = Arrays.asList("apple", "banana", "orange");
        List<String> list2 = Arrays.asList("banana", "grape", "kiwi");
        List<String> mergedAndDistinct = Stream.concat(list1.stream(), list2.stream()).distinct().collect(Collectors.toList());
        System.out.println("Merged and distinct list: " + mergedAndDistinct);

        //9. Find the sum of all digits of a number.

        int number = 12345;
        int sumOfDigits = String.valueOf(number).chars().map(Character::getNumericValue).sum();
        System.out.println("Sum of digits: " + sumOfDigits);


        //10. Merge two unsorted arrays into a single sorted array.

        int[] array1 = {5, 2, 8, 1, 7};
        int[] array2 = {4, 9, 3, 6, 10};
        int[] mergedAndSortedArray = Arrays.stream(array1).boxed().sorted().mapToInt(Integer::intValue).toArray();
        System.out.println("Merged and sorted array: " + Arrays.toString(mergedAndSortedArray));

        //11. Check if two strings are anagrams or not.

        String s1 = "listen";
        String s2 = "silent";

        s1 = Stream.of(s1.split("")).map(String::toLowerCase).sorted().collect(Collectors.joining());
        s2 = Stream.of(s2.split("")).map(String::toLowerCase).sorted().collect(Collectors.joining());
        if (s1.equals(s2))
            System.out.println("Two strings are anagrams");
        else
            System.out.println("Two strings are not anagrams");

        //12. Reverse each word of a string.

//        String str = "Hello World!";
        String reversedStr = Arrays.stream(str.split(" ")).map(word -> new StringBuffer(word).reverse()).collect(Collectors.joining(" "));
        System.out.println("Reversed String: " + reversedStr);

        //13. Check if a string is palindrome or not.

//        String str = "madam";
        boolean isPalindrome = IntStream.range(0, str.length() / 2)
				.noneMatch(index -> str.charAt(index) != str.charAt(str.length() - index - 1));
        if(isPalindrome)
            System.out.println(str + " is palindrome");
        else
            System.out.println(str + " is not palindrome");


        //14. Given a list of lists of strings, flatten it into a single list of unique words.

        List<List<String>> listOfLists = Arrays.asList(
                Arrays.asList("apple", "orange", "banana"),
                Arrays.asList("banana", "grape", "kiwi"),
                Arrays.asList("orange", "apple", "kiwi"));
        List<String> uniqueWords = listOfLists.stream()
                .flatMap(List::stream)  // Flatten the nested lists
                .distinct()             // Get unique words
                .collect(Collectors.toList());
        System.out.println("Unique words: " + uniqueWords);

        //15. Print fibonacci series.

        int n = 10;
        Stream.iterate(new long[]{0, 1}, fib -> new long[]{fib[1], fib[0] + fib[1]}).limit(n).mapToLong(fib -> fib[0]).forEach(System.out::println);


    }
}


