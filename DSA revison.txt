DSA :

	String skip question -> skip a letter, skip a word 
	

static skip(String up){
	if(up.isEmpty){
		return "";
	}
	
	if(up.charAt(0) == "a"){
		return skip(up.subString(1));
	}else{
		return up.charAt(0) + skip( up.subString(1));
	}
}

	Subsets Subseq pattern : Taking any number of element tat may and may not be adjacents 
	Permutation and combination 
	This pattern of taking some element and removing some element than subset pattern
public class sub{
psvm(){
	subsequence("","abc");
	}
static void subsequence(String p,String up){
	if(seq.isEmpty()){
		sout(p);
		return;
	}
	Char ch = up.subString(0);
	skip(p + ch ,up.subString(1));
	skip(ch, up.subString(1);
}
}

	permutation count of a string 
static int permutationsCount(String p, String up) {
        if (up.isEmpty()) {
            return 1;
        }
        int count = 0;
        char ch = up.charAt(0);
        for (int i = 0; i <= p.length(); i++) {
            String f = p.substring(0, i);
            String s = p.substring(i, p.length());
            count = count + permutationsCount(f + ch + s, up.substring(1));
        }
        return count;
   }

	
	Permutation of string 
static void permutations(String p, String up) {
        if (up.isEmpty()) {
            System.out.println(p);
            return;
        }
        char ch = up.charAt(0);
        for (int i = 0; i <= p.length(); i++) {
            String f = p.substring(0, i);
            String s = p.substring(i, p.length());
            permutations(f + ch + s, up.substring(1));
        }
}
	
	
	Subset of Array of Integers 

static List<List<Integer>> subsets(int arr[]){

List<List<Intger>> outer = new ArrayList<>();
outer.add(new ArrayList<>());
for(int num : arr){
	int n = outer.size();
	for(int i =0;i<n;i++){
	List<Intger> internal = new ArrayList<>();
	internal.add(num);
	outer.add(internal);
	}}
	return outer;
}

	Dice combination for returning 4 
public class Dice {
    public static void main(String[] args) {
        dice("", 4);
        System.out.println(diceRet("", 4));
    }

    static void dice(String p, int target) {
        if (target == 0) {
            System.out.println(p);
            return;
        }

        for (int i = 1; i <= 6 && i <= target; i++) {
            dice(p + i, target - i);
        }
}

	Backtracking 
	Nqueens Place 4 queens on it 
	pubic class Nqueens{
		psvm(String args[]){
			int n = 4
			boolean board[][] = new boolean[n][n];
			sout(queens(board,n));
		}
		
		static int queens(boolean board[][],int row){
			if(n= board.length){
				display(board);
				sout;
				return 1;
			}
			int count = 0;
			for(int col =0;col<board.length;col++){
				if(isSafe(board,row,col){
				board[row][col] = true;
				count += queens(board,row+1);
				board[row][col] = false;
				}
			}
			return count;
		}
		
		 private static boolean isSafe(boolean[][] board, int row, int col) {
        // check vertical row
        for (int i = 0; i < row; i++) {
            if (board[i][col]) {
                return false;
            }
        }

        // diagonal left
        int maxLeft = Math.min(row, col);
        for (int i = 1; i <= maxLeft; i++) {
            if(board[row-i][col-i]) {
                return false;
            }
        }

        // diagonal right
        int maxRight = Math.min(row, board.length - col - 1);
        for (int i = 1; i <= maxRight; i++) {
            if(board[row-i][col+i]) {
                return false;
            }
        }

        return true;
    }

    private static void display(boolean[][] board) {
        for(boolean[] row : board) {
            for(boolean element : row) {
                if (element) {
                    System.out.print("Q ");
                } else {
                    System.out.print("X ");
                }
            }
            System.out.println();
        }
    }
	
	
	
	
	
	
	
	Kadanes algo Maximum sum of sub array
	
int maxSubarraySum(int[] arr) {
    int maxCurrent = arr[0];
    int maxGlobal = arr[0];
    
    for (int i = 1; i < arr.length; i++) {
        maxCurrent = Math.max(arr[i], maxCurrent + arr[i]);
        if (maxCurrent > maxGlobal) {
            maxGlobal = maxCurrent;
        }
    }
    
    return maxGlobal;
}

	Phone number :
class Solution {
    public List<String> letterCombinations(String digits) {
         if (digits == null || digits.isEmpty()) {
            return new ArrayList<>();
        }
        return padRet("",digits);
    }

    static List<String> padRet(String p, String up) {
        if (up.isEmpty()) {
            List<String> list = new ArrayList<>();
            list.add(p);
            return list;
        }

        // Define the mapping of digits to letters
        String[] mapping = {
            "",     // 0
            "",     // 1
            "abc",  // 2
            "def",  // 3
            "ghi",  // 4
            "jkl",  // 5
            "mno",  // 6
            "pqrs", // 7
            "tuv",  // 8
            "wxyz"  // 9
        };

        int digit = up.charAt(0) - '0'; // Convert char to int
        String letters = mapping[digit]; // Get corresponding letters
        List<String> list = new ArrayList<>();

        // Loop through the corresponding letters
        for (char ch : letters.toCharArray()) {
            list.addAll(padRet(p + ch, up.substring(1)));
        }

        return list;
    }
}

		Linked List : 
package com.kunal;

import javax.swing.*;

public class InterviewQuestions {

    // https://leetcode.com/problems/linked-list-cycle
    // Amazon and Microsoft
    public boolean hasCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                return true;
            }
        }
        return false;
    }

    // find length of the cycle
    public int lengthCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                // calculate the length
                ListNode temp = slow;
                int length = 0;
                do {
                    temp = temp.next;
                    length++;
                } while (temp != slow);
                return length;
            }
        }
        return 0;
    }

    // https://leetcode.com/problems/linked-list-cycle-ii/
    public ListNode detectCycle(ListNode head) {
        int length = 0;

        ListNode fast = head;
        ListNode slow = head;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                length = lengthCycle(slow);
                break;
            }
        }

        if (length == 0) {
            return null;
        }

        // find the start node
        ListNode f = head;
        ListNode s = head;

        while (length > 0) {
            s = s.next;
            length--;
        }

        // keep moving both forward and they will meet at cycle start
        while (f != s) {
            f = f.next;
            s = s.next;
        }
        return s;
    }

    // Google: https://leetcode.com/problems/happy-number/
    public boolean isHappy(int n) {
        int slow = n;
        int fast = n;

        do {
            slow = findSquare(slow);
            fast = findSquare(findSquare(fast));
        } while (slow != fast);

        if (slow == 1) {
            return true;
        }
        return false;
    }
    private int findSquare(int number) {
        int ans = 0;
        while (number > 0) {
            int rem = number % 10 ;
            ans += rem * rem;
            number /= 10;
        }
        return ans;
    }


    // https://leetcode.com/problems/middle-of-the-linked-list/submissions/
    public ListNode middleNode(ListNode head) {
        ListNode s = head;
        ListNode f = head;

        while (f != null && f.next != null) {
            s = s.next;
            f = f.next.next;
        }
        return s;
    }



    // https://leetcode.com/problems/reverse-linked-list/submissions/
    // google, apple, amazon, microsoft
    public ListNode reverseList(ListNode head) {
        if (head == null) {
            return head;
        }
        ListNode prev = null;
        ListNode present = head;
        ListNode next = present.next;

        while (present != null) {
            present.next = prev;
            prev = present;
            present = next;
            if (next != null) {
                next = next.next;
            }
        }
        return prev;
    }

    // Google, Microsoft, Facebook: https://leetcode.com/problems/reverse-linked-list-ii/
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if (left == right) {
            return head;
        }

        // skip the first left-1 nodes
        ListNode current = head;
        ListNode prev = null;
        for (int i = 0; current != null && i < left - 1; i++) {
            prev = current;
            current = current.next;
        }

        ListNode last = prev;
        ListNode newEnd = current;

        // reverse between left and right
        ListNode next = current.next;
        for (int i = 0; current != null && i < right - left + 1; i++) {
            current.next = prev;
            prev = current;
            current = next;
            if (next != null) {
                next = next.next;
            }
        }

        if (last != null) {
            last.next = prev;
        } else {
            head = prev;
        }

        newEnd.next = current;
        return head;
    }


    // google, amazon, facebook, microsoft: https://leetcode.com/problems/reverse-nodes-in-k-group/
    public ListNode reverseKGroup(ListNode head, int k) {
        if (k <= 1 || head == null) {
            return head;
        }

        ListNode current = head;
        ListNode prev = null;

		int length = getLength(head);
		int count = length / k;
        while (count > 0) {
            ListNode last = prev;
            ListNode newEnd = current;

            ListNode next = current.next;
            for (int i = 0; current != null && i < k; i++) {
                current.next = prev;
                prev = current;
                current = next;
                if (next != null) {
                    next = next.next;
                }
            }

            if (last != null) {
                last.next = prev;
            } else {
                head = prev;
            }

            newEnd.next = current;

            prev = newEnd;
			count--;
        }
        return head;
    }

	public int getLength(ListNode head) {
		ListNode node = head;
		int length = 0;
		while (node != null) {
			length++;
			node = node.next;
		}
		return length;
	}

    // https://www.geeksforgeeks.org/reverse-alternate-k-nodes-in-a-singly-linked-list/
    public ListNode reverseAlternateKGroup(ListNode head, int k) {
        if (k <= 1 || head == null) {
            return head;
        }

        // skip the first left-1 nodes
        ListNode current = head;
        ListNode prev = null;

        while (current != null) {
            ListNode last = prev;
            ListNode newEnd = current;

            // reverse between left and right
            ListNode next = current.next;
            for (int i = 0; current != null && i < k; i++) {
                current.next = prev;
                prev = current;
                current = next;
                if (next != null) {
                    next = next.next;
                }
            }

            if (last != null) {
                last.next = prev;
            } else {
                head = prev;
            }

            newEnd.next = current;

            // skip the k nodes
            for (int i = 0; current != null && i < k; i++) {
                prev = current;
                current = current.next;
            }
        }
        return head;
    }


    // linkedin, google, facebook, microsoft, amazon, apple
//    https://leetcode.com/problems/palindrome-linked-list/
    public boolean isPalindrome(ListNode head) {
        ListNode mid = middleNode(head);
        ListNode headSecond = reverseList(mid);
        ListNode rereverseHead = headSecond;

        // compare both the halves
        while (head != null && headSecond != null) {
            if (head.val != headSecond.val) {
                break;
            }
            head = head.next;
            headSecond = headSecond.next;
        }
        reverseList(rereverseHead);

        return head == null || headSecond == null;
    }

    // https://leetcode.com/problems/reorder-list/
// Google, Facebook
    public void reorderList(ListNode head) {
        if (head == null || head.next == null) {
            return;
        }

        ListNode mid = middleNode(head);

        ListNode hs = reverseList(mid);
        ListNode hf = head;

        // rearrange
        while (hf != null && hs != null) {
            ListNode temp = hf.next;
            hf.next = hs;
            hf = temp;

            temp = hs.next;
            hs.next = hf;
            hs = temp;
        }

        // next of tail to null
        if (hf != null) {
            hf.next = null;
        }
    }

    // FaceBook, Twitter, Google: https://leetcode.com/problems/rotate-list/
    public ListNode rotateRight(ListNode head, int k) {
        if (k <= 0 || head == null || head.next == null) {
            return head;
        }

        ListNode last = head;
        int length = 1;
        while (last.next != null) {
            last = last.next;
            length++;
        }

        last.next = head;
        int rotations = k % length;
        int skip = length - rotations;
        ListNode newLast = head;
        for (int i = 0; i < skip - 1; i++) {
            newLast = newLast.next;
        }
        head = newLast.next;
        newLast.next = null;

        return head;
    }

}

class ListNode {
    int val;
    ListNode next;

    public ListNode() {
    }

    ListNode(int x) {
        val = x;
        next = null;
    }
}


---------------------------------------------------------------------
	Merge Sort LinkedList 
package com.kunal;

public class MergeSort {

    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode mid = getMid(head);
        ListNode left = sortList(head);
        ListNode right = sortList(mid);

        return merge(left, right);
    }

    ListNode merge(ListNode list1, ListNode list2) {
        ListNode dummyHead = new ListNode();
        ListNode tail = dummyHead;
        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                tail.next = list1;
                list1 = list1.next;
                tail = tail.next;
            } else {
                tail.next = list2;
                list2 = list2.next;
                tail = tail.next;
            }
        }
        tail.next = (list1 != null) ? list1 : list2;
        return dummyHead.next;
    }

    ListNode getMid(ListNode head) {
        ListNode midPrev = null;
        while (head != null && head.next != null) {
            midPrev = (midPrev == null) ? head : midPrev.next;
            head = head.next.next;
        }
        ListNode mid = midPrev.next;
        midPrev.next = null;
        return mid;
    }
}

----------
	DFS and BFS 

// BFS to find the shortest path from the root to a leaf
    public static int findShortestPath(TreeNode root) {
        if (root == null) return 0;

        // Queue for BFS
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> depth = new LinkedList<>();

        queue.add(root);
        depth.add(1); // Depth starts at 1 for the root

        while (!queue.isEmpty()) {
            TreeNode current = queue.poll();
            int currentDepth = depth.poll();

            // If it's a leaf node, return the depth
            if (current.left == null && current.right == null) {
                return currentDepth;
            }

            // Add left child to queue
            if (current.left != null) {
                queue.add(current.left);
                depth.add(currentDepth + 1);
            }

            // Add right child to queue
            if (current.right != null) {
                queue.add(current.right);
                depth.add(currentDepth + 1);
            }
        }
        return 0; // This won't be reached if the tree is valid
    }
	

	Maximum sum for weighted nodes DFS 

    static class Result {
        int maxSum;
        public Result() {
            maxSum = Integer.MIN_VALUE; // To handle negative values
        }
    }

    public static int findMaxPathSum(TreeNode root) {
        Result result = new Result();
        calculatePathSum(root, result);
        return result.maxSum;
    }

    // Helper function to calculate the maximum path sum using DFS
    private static int calculatePathSum(TreeNode node, Result result) {
        if (node == null) return 0; // Base case: Null nodes contribute 0 to the path

        // Recursively find the max path sum for the left and right subtrees
        int leftSum = Math.max(0, calculatePathSum(node.left, result));  // Ignore negative sums
        int rightSum = Math.max(0, calculatePathSum(node.right, result));

        // Path sum passing through the current node
        int currentPathSum = leftSum + node.value + rightSum;

        // Update the global max path sum if the current path sum is larger
        result.maxSum = Math.max(result.maxSum, currentPathSum);

        // Return the maximum sum including the current node and one of its children
        return node.value + Math.max(leftSum, rightSum);
    }
	
	
	Longest sub string in a window 
public class LongestUniqueSubstring {

    public static int findLongestUniqueSubstring(String s) {
        // HashSet to store the unique characters in the current window
        HashSet<Character> set = new HashSet<>();
        
        int left = 0; // Left pointer of the window
        int maxLength = 0; // To store the maximum length of unique substring

        // Expand the window by moving the right pointer
        for (int right = 0; right < s.length(); right++) {
            char currentChar = s.charAt(right);

            // If the character is already in the set, remove characters from the left
            while (set.contains(currentChar)) {
                set.remove(s.charAt(left));
                left++;
            }

            // Add the current character to the set
            set.add(currentChar);

            // Update the maximum length
            maxLength = Math.max(maxLength, right - left + 1);
        }

        return maxLength;
    }




